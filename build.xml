<?xml version="1.0"?>
<project name="XMLJSONMarshalling" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- PART 1: Ivy properties, download, installation and configuration -->
    <property name="ivy.install.version" value="2.4.0-rc1" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <!-- this targe will donwload ivy.jar if its not in the "ivy" folder yet -->
    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}" />
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <echo message="installing ivy..." />
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
    </target>
    <!--
	 ================================= 
      target: install-ivy         
        this target is not necessary if you put ivy.jar in your ant lib directory
        if you already have ivy in your ant lib, you can simply remove this
        target and the dependency the 'init' target has on it
     ================================= 
	-->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!--
		 try to load ivy here from local ivy dir, in case the user has not already dropped
          it into ant's lib dir (note that the latter copy will always take precedence).
          We will not fail as long as local lib dir exists (it may be empty) and
          ivy is in at least one of ant's lib dir or the local lib dir. 
		-->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
    </target>

	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="xjc.package" value="people.generated" />
	<property name="lib.dir" value="lib" />
	
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>
	
	<target name="resolve" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
	</target>
	
	<target name="init" depends="install-ivy, resolve">
        <echo message="Init has been called" />
        <mkdir dir="${build.dir}" />
        <echo message="${build.dir} has been created" />
    </target>
    <target name="clean">
        <echo message="Clean has been called" />
        <delete dir="${build.dir}" />
        <echo message="${build.dir} has been deleted" />
        <delete dir="${src.dir}/${xjc.package}" />
        <echo message="${src.dir}/${xjc.package} has been deleted" />
        <delete file="catalog.xml" />
        <echo message="catalog.xml has been deleted" />
    </target>
    <target name="install" depends="clean, init">
        <echo message="Compile target has been called" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
        </javac>
        <copy todir="${build.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <include name="*.xml" />
                <include name="**/*.xml" />
            </fileset>
        </copy>       
    </target>
	
	<target name="compile" depends="install">
        <echo message="Compile target has been called"/>
        <javac srcdir="src" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false"/>   
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
    </target>
	
	<target name="execute.evaluation" depends="compile, execute.PrintAllPeople, 
		execute.GetPeopleByID, execute.GetPeopleByWeight, execute.HPReader, execute.HPWriter, execute.HPJson">
		<echo message="Calling execute.evaluation target"/>		
	</target>
	
	<target name="execute.DisplayHealthProfile">
		<echo message="=> Executing displayHealthProfile with ID=10" />
		<java classname="HealthProfileXMLReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="displayHealthProfile"/>		
		    <arg value="10"/>			
		</java>
	</target>
	
	<target name="execute.PrintAllPeople">
		<echo message="=> Executing printAllPeople" />
		<java classname="HealthProfileXMLReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="printAllPeople"/>
		</java>
	</target>
	
	<target name="execute.GetPeopleByID">
		<echo message="=> Executing getPeopleByID: with ID=5" />
		<java classname="HealthProfileXMLReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="getPeopleByID"/>		
		    <arg value="5"/>			
		</java>
	</target>
	
	<target name="execute.GetPeopleByWeight">
		<echo message="=> Executing getPeopleByWeight: with weight > 90"/>
		<java classname="HealthProfileXMLReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="getPeopleByWeight"/>		
		    <arg value=">90"/>
		</java>
	</target>
	
	<target name="execute.HPReader">
		<echo message="=> Marshalling to XML: will produce a people_new.xml in home folder" />
		<java classname="HealthProfileReader" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	
	<target name="execute.HPWriter">
		<echo message="=> Unmarshalling from XML: will read the people.xml in home folder and print one at a time" />
		<java classname="HealthProfileWriter" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	
	<target name="execute.HPJson">
		<echo message="=> Executing Health Profile Writer for Json" />
		<java classname="HealthProfileJSON" classpath="${build.dir}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>	
</project>